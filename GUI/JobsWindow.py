import sqlite3
from PySide6.QtCore import QRect
from PySide6.QtWidgets import (
    QWidget,
    QPushButton,
    QListWidget,
    QApplication,
    QListWidgetItem,
    QLineEdit,
    QTextEdit,
)
from PySide6.QtWidgets import QVBoxLayout, QHBoxLayout, QLabel
from PySide6.QtGui import QFont, QGuiApplication
from DataBase import DBUtils
from GUI.EnterPersonalDataWindow import PersonalDataWindow
from GUI.SelectUserWindow import SelectUser

class JobsWindow(QWidget):
    def __init__(
        self, jobs_data: list[dict], conn: sqlite3.Connection, cursor: sqlite3.Cursor
    ):
        super().__init__()
        self.jobs_data = jobs_data
        self.db_connection = conn
        self.cursor = cursor
        self.list_control = None
        self.job_title = None
        self.job_description = None
        self.company = None
        self.job_location = None
        self.full_time = None
        self.salary = None
        self.link = None
        self.setup_window()

    def setup_window(self):
        self.setWindowTitle("Select a Job")
        main_layout = QVBoxLayout()
        top_layout = QHBoxLayout()
        self.list_control = QListWidget()
        # setup the list control
        top_layout.addWidget(self.list_control)
        self.fill_job_list(self.jobs_data)
        main_layout.addLayout(top_layout)
        self.setLayout(main_layout)
        # put together the more data section
        more_data_panel = QVBoxLayout()
        self.fill_more_data_panel(more_data_panel)
        top_layout.addLayout(more_data_panel)
        self.list_control.currentItemChanged.connect(self.show_full_job_data)
        bottom_layout = QHBoxLayout()
        button_font = QFont("Arial", 12, QFont.Weight.Bold)
        enter_personal_info_button = QPushButton("Enter Personal Info")
        enter_personal_info_button.clicked.connect(self.show_enter_personal_info)
        enter_personal_info_button.setFont(button_font)
        select_user_button = QPushButton('Select User')
        select_user_button.clicked.connect(self.show_select_user)
        select_user_button.setFont(button_font)
        select_job_button = QPushButton('Select Job')
        select_job_button.clicked.connect(self.selected_job)
        select_job_button.setFont(button_font)
        quit_button = QPushButton("Quit")
        quit_button.setFont(button_font)
        quit_button.clicked.connect(self.quit)
        bottom_layout.addWidget(select_user_button)
        bottom_layout.addWidget(enter_personal_info_button)
        bottom_layout.addWidget(quit_button)
        bottom_layout.addWidget(select_job_button)
        main_layout.addLayout(bottom_layout)
        self.set_half_screen_size()

    def fill_more_data_panel(self, panel: QVBoxLayout):
        label_font = QFont("Arial", 12, QFont.Weight.Bold)
        company_label = QLabel("Company:")
        company_label.setFont(label_font)
        panel.addWidget(company_label)
        self.company = QLineEdit()
        panel.addWidget(self.company)
        panel.addWidget(QLabel("Job Title:"))
        self.job_title = QLineEdit()
        panel.addWidget(self.job_title)
        panel.addWidget(QLabel("Job Description:"))
        self.job_description = QTextEdit()
        panel.addWidget(self.job_description)
        panel.addWidget(QLabel("Job Location:"))
        self.job_location = QLineEdit()
        panel.addWidget(self.job_location)
        panel.addWidget(QLabel("Full Time:"))
        self.full_time = QLineEdit()
        panel.addWidget(self.full_time)
        full_time_label = QLabel("Full Time/Part Time:")
        panel.addWidget(full_time_label)
        self.full_time = QLineEdit()
        panel.addWidget(self.full_time)
        salary_label = QLabel("Salary:")
        panel.addWidget(salary_label)
        self.salary = QLineEdit()
        panel.addWidget(self.salary)
        link_label = QLabel("Job HyperLink:")
        panel.addWidget(link_label)
        self.link = QLineEdit()
        panel.addWidget(self.link)

    # this function was originally generated by Gemini but that version only
    # made the window full height but half width, so I modified it to do 2/3 height
    def set_half_screen_size(self):
        screen = QGuiApplication.primaryScreen()
        available_geometry = screen.availableGeometry()
        width = available_geometry.width()
        height = available_geometry.height()
        self.setGeometry(
            QRect(width // 10, height // 10, width // 2, (height // 3) * 2)
        )  # Set size to half width, 2/3 height, positioned just off top-left

    def fill_job_list(self, data_to_show: list):  # allow list to be filtered in sprint4
        for job in data_to_show:
            job_text_for_list = f"{job['company_name']} : {job['job_title']}"
            item = QListWidgetItem(job_text_for_list, listview=self.list_control)
            item.setData(1, job["job_id"])

    def show_full_job_data(self, current: QListWidgetItem, previous: QListWidgetItem):
        selected_data = current.data(
            1
        )  # the data function has a 'role' I added the job_id as role 1, visible is role 0
        job = get_complete_job_data(self.jobs_data, selected_data)
        self.job_title.setText(job["job_title"])
        self.job_description.setText(job["job_description"])
        self.company.setText(job["company_name"])
        self.job_location.setText(job["location"])
        self.full_time.setText(job["full_time"])
        self.salary.setText(job["salary"])
        self.link.setText(job["url"])
        self.salary.setText(job["salary"])

    def quit(self):
        DBUtils.close_db(self.db_connection)
        QApplication.instance().quit()

    def show_enter_personal_info(self):
        self.pop_up = PersonalDataWindow(self.cursor)
        self.pop_up.show()

    def show_select_user(self):
        self.pop_up = SelectUser(self.cursor)
        self.pop_up.show()

    def selected_job(self):
        self.cursor.execute("DELETE FROM selected_job;")
        current_item = self.list_control.currentItem()
        selected_data = current_item.data(1)
        data = get_complete_job_data(self.jobs_data, selected_data)
        data_to_insert = (
            data["job_id"],
            data["job_title"],
            data["job_description"],
            data["company_name"],
            data["location"],
            data["full_time"],
            data["url"],
            data["salary"],
        )
        insert_selected_job = """INSERT into selected_job(job_id, job_title, job_description, 
                 company_name, location, full_time, url, salary)
                 VALUES(?,?,?,?,?,?,?,?)"""
        self.cursor.execute(insert_selected_job, data_to_insert)


def get_complete_job_data(job_list, job_id: str) -> dict:
    for job in job_list:
        if job["job_id"] == job_id:
            return job
